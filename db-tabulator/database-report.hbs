<h2>Live update: {{page}}</h2>
<div id="report-updates"></div>
<img src="/images/loading.gif" height="40" width="40" id="loading-sign" alt="loading">

<script>
	function addUpdate(msg) {
		if (!msg) return;
		let p = document.createElement('p');
		p.innerHTML = msg;
		document.getElementById('report-updates').appendChild(p);
	}
	function link(pageName, displayName) {
		return `<a href="https://en.wikipedia.org/w/index.php?title=${encodeURIComponent(pageName)}" title="${pageName.replace(/"/g, '&#34;')}" target="_blank">${typeof displayName === 'string' ? displayName : pageName}</a>`;
	}
	function shorten(str, length) {
		return str.length < length ? str : str.slice(0, length) + ' ...';
	}
	function error(msg) {
		return `<span style="color: red; font-weight: bold">${msg}</span>`;
	}
	function safeStringify(obj) {
		try {
			return JSON.stringify(obj, undefined, 2);
        } catch (e) {
			return '<Circular object>';
        }
    }

	let params = new Map(new URLSearchParams(location.search));
	let page = params.get('page');
	let source = new EventSource('/database-report/stream?page=' + encodeURIComponent(page));

	function finish() {
		document.getElementById('loading-sign').remove();
		source.close();
	}

	source.onopen = function () {
		console.log('Connected to stream');
	}

	let messages = {
		'failed-get-last-revid': _ => 'ERROR: Failed to retrieve last revision id for this page.',
		'shutoff': data => `Bot is currently shut off via ${link(data.SHUTOFF_PAGE)}. The shutoff page should be blank for it to work.`,
		'shutoff-checked': _ => '',
		'already-in-progress': data => `An update is already in progress for report(s) on page ${link(page)} (revid ${data.revId}).`,
		'looking-up-transclusions': _ => `No reports found on ${link(page)}. Looking up pages transcluded on ${page}.`,
		'started': data => data.numQueries === 1 ? `Found 1 query.` : `Found ${data.numQueries} queries.`,
		'no-queries': _ => `Did not find any instances of {` +
				`{${link('Template:Database report', 'database report')}}} on ${link(page)}.`,

		// From Query class:
        'lua-executing': data => `Executing ${link('Module:' + data.args[0])}, function <code>${data.args[1]}</code> ${data.args[2] ? 'with params ' + data.args[2] : 'without any params.'}`,
        'lua-executed': data => `Lua module output: <pre>${data.args[0]}</pre>`,
        'lua-no-template': 'No <code>{` + `{database report}}</code> template found in Lua module output',
        'no-sql': 'No <code>|sql=</code> parameter found in {` + `{database report}}',
		'query-executing': data => `Query (<code>${shorten(data.args[0], 80)}</code>) submitted to database.`,
		'query-executed': data => `Query finished running in ${data.args[0]} seconds.`,
		'postprocessing': _ => `Started JS postprocessing on query result.`,
		'js-logging': data => `Logging output: <pre>${safeStringify(data.args[0])}</pre>`,
		'js-no-array': _ => error(`JS postprocess() must return an array. `) + 'Saving result without postprocessing.',
		'js-invalid-return': _ => error(`JS postprocess() returned a value which is not transferable. `) +
				'Saving result without postprocessing.',
		'js-failed': data => error(`JS postprocessing failed. `) + `Error: ${data.args[0]}. Saving result without postprocessing.`,
		'process-timed-out': _ => error(`Child process timed out`),
		'postprocessing-complete': data => `Finished JS postprocessing on query result in ${data.args[0]} seconds.`,
		'catastrophic-error': _ => error(`Your custom JS code was force-terminated due to excessive memory or time usage.`),
		'saving': data => `Saving ${link(data.args[0])}.`,
		'end-not-found': _ => `[WARNING]: No {` + `{database report end}} template was found. Overwriting rest of the page.`,
		'save-success': data => `Successfully saved page ${link(data.args[0])}.`,
		'save-failure': data => `Failed to save page ${link(data.args[0])}. Error: ${data.args[1]}`,
		'done-one': _ => `<br>`,
		'completed': _ => `<span style="font-weight: bold">Updates completed.</span>`,
	};

	source.onmessage = function (msg) {
		let data = JSON.parse(msg.data);
		let code = data.code;

		if (messages[code]) {
			addUpdate(messages[code](data));
		} else if (code === 'end') {
			finish();
		} else {
			addUpdate(`Unknown update: ${code}`);
			console.error(data);
		}
	}
	source.onerror = function (err) {
		finish();
		addUpdate(`${error('Something bad happened :(')} <br> The reports may or may not have been updated or are being updated. Please check the page history in a while.`);
		console.error(err);
	}
</script>
